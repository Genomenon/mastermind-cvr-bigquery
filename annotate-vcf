#!/bin/bash

# Created by argbash-init v2.8.0
# ARG_HELP([<Annotates BigTable VCF using Genomenon public CVR dataset>])
# ARG_POSITIONAL_SINGLE([vcf-table],[VCF table as dataset.table])
# ARG_POSITIONAL_SINGLE([target-table],[Target table as dataset.table for annotated VCF])
# ARG_POSITIONAL_SINGLE([assembly-version],[Assembly version. GRCh37 or GRCh38])
# ARG_POSITIONAL_SINGLE([reference-name-type],[reference_name type: contig (i.e. NC_000014.9), chr (i.e. 14), or chr_prefix (i.e. chr14)])
# ARG_OPTIONAL_SINGLE([cvr-version],[c],[CVR table date. Default: latest])
# ARG_OPTIONAL_BOOLEAN([batch],[b],[Run as batch query. Batch queries don't count towards your concurrent rate limit])
# ARG_OPTIONAL_BOOLEAN([dry-run],[n],[Dry run outputs the command that would be executed])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='hcbn'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_cvr_version=
_arg_batch="off"
_arg_dry_run="off"


print_help()
{
	printf '%s\n' "<Annotates BigTable VCF using Genomenon public CVR dataset>"
	printf 'Usage: %s [-h|--help] [-c|--cvr-version <arg>] [-b|--(no-)batch] [-n|--(no-)dry-run] <vcf-table> <target-table> <assembly-version> <reference-name-type>\n' "$0"
	printf '\t%s\n' "<vcf-table>: VCF table as dataset.table"
	printf '\t%s\n' "<target-table>: Target table as dataset.table for annotated VCF"
	printf '\t%s\n' "<assembly-version>: Assembly version. GRCh37 or GRCh38"
	printf '\t%s\n' "<reference-name-type>: reference_name type: contig (i.e. NC_000014.9), chr (i.e. 14), or chr_prefix (i.e. chr14)"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\t%s\n' "-c, --cvr-version: CVR table date. Default: latest (no default)"
	printf '\t%s\n' "-b, --batch, --no-batch: Run as batch query. Batch queries don't count towards your concurrent rate limit (off by default)"
	printf '\t%s\n' "-n, --dry-run, --no-dry-run: Dry run outputs the command that would be executed (off by default)"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			-c|--cvr-version)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_cvr_version="$2"
				shift
				;;
			--cvr-version=*)
				_arg_cvr_version="${_key##--cvr-version=}"
				;;
			-c*)
				_arg_cvr_version="${_key##-c}"
				;;
			-b|--no-batch|--batch)
				_arg_batch="on"
				test "${1:0:5}" = "--no-" && _arg_batch="off"
				;;
			-b*)
				_arg_batch="on"
				_next="${_key##-b}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					begins_with_short_option "$_next" && shift && set -- "-b" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-n|--no-dry-run|--dry-run)
				_arg_dry_run="on"
				test "${1:0:5}" = "--no-" && _arg_dry_run="off"
				;;
			-n*)
				_arg_dry_run="on"
				_next="${_key##-n}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					begins_with_short_option "$_next" && shift && set -- "-n" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'vcf-table', 'target-table', 'assembly-version' and 'reference-name-type'"
	test "${_positionals_count}" -ge 4 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 4 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 4 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 4 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_vcf_table _arg_target_table _arg_assembly_version _arg_reference_name_type "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


[[ $_arg_cvr_version = "" ]] && CVR_ID=`./list-cvr-tables -v ${_arg_assembly_version} | head -n 1` || CVR_ID=`./list-cvr-tables | grep "${_arg_assembly_version}_${_arg_cvr_version}"`
if [[ $CVR_ID == "" ]]; then
    echo "CVR table not found"
    exit 1
fi
VCF=${_arg_vcf_table} CVR="genomenon.cvr.${CVR_ID}"
case ${_arg_reference_name_type} in
    chr)
        REFERENCE_NAME=CHROM_BARE
        ;;
    chr_prefix)
        REFERENCE_NAME=CHROM_CHR
        ;;
    contig)
        REFERENCE_NAME=reference_name
        ;;
    *)
        echo "Invalid reference-name-type. Must be one of: contig, chr, or chr_prefix"
        exit 1
        ;;
esac
QUERY=`< query.sql`
QUERY="${QUERY//$\{CVR\}/$CVR}"
QUERY="${QUERY//$\{VCF\}/$VCF}"
QUERY="${QUERY//$\{REFERENCE_NAME\}/$REFERENCE_NAME}"
[[ $_arg_batch = "on" ]] && BATCH="--batch" || BATCH=""

FULL_COMMAND="bq query --destination_table ${_arg_target_table} --use_legacy_sql=false ${BATCH} \"${QUERY}\""

echo $FULL_COMMAND
if [ $_arg_dry_run != "on" ]; then
    eval $FULL_COMMAND
else
    echo "Dry run"
fi

# ] <-- needed because of Argbash
