#!/bin/bash

# Created by argbash-init v2.8.0
# ARG_HELP([<Convert VCF in bucket to BigQuery table>])
# ARG_POSITIONAL_SINGLE([bucket-name],[Bucket name])
# ARG_POSITIONAL_SINGLE([table],[New unique BigQuery table name: dataset.table])
# ARG_POSITIONAL_SINGLE([header-file],[Representative VCF header file bucket path])
# ARG_OPTIONAL_BOOLEAN([dry-run],[n],[Dry run outputs the command that would be executed])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='hn'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_dry_run="off"


print_help()
{
	printf '%s\n' "<Convert VCF in bucket to BigQuery table>"
	printf 'Usage: %s [-h|--help] [-n|--(no-)dry-run] <bucket-name> <table> <header-file>\n' "$0"
	printf '\t%s\n' "<bucket-name>: Bucket name"
	printf '\t%s\n' "<table>: New unique BigQuery table name: dataset.table"
	printf '\t%s\n' "<header-file>: Representative VCF header file bucket path"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\t%s\n' "-n, --dry-run, --no-dry-run: Dry run outputs the command that would be executed (off by default)"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			-n|--no-dry-run|--dry-run)
				_arg_dry_run="on"
				test "${1:0:5}" = "--no-" && _arg_dry_run="off"
				;;
			-n*)
				_arg_dry_run="on"
				_next="${_key##-n}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					begins_with_short_option "$_next" && shift && set -- "-n" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'bucket-name', 'table' and 'header-file'"
	test "${_positionals_count}" -ge 3 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 3 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 3 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 3 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_bucket_name _arg_table _arg_header_file "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


DATE=`date +%Y%m%d`
TIME=`date +%H%M%S`
GOOGLE_CLOUD_PROJECT=`gcloud config get-value project`
INPUT_TABLE=${GOOGLE_CLOUD_PROJECT}:${_arg_table}
OUTPUT_FILE=gs://${_arg_bucket_name}/${_arg_table}_${DATE}_${TIME}.vcf
TEMP_LOCATION=gs://${_arg_bucket_name}/temp
if [ $_arg_header_file != "" ]; then
    HEADER_URL="gs://${_arg_bucket_name}/${_arg_header_file}"
    gsutil stat $HEADER_URL &> /dev/null
    rc=$?; if [[ $rc != 0 ]]; then echo "Header file doesn't exist"; exit $rc; fi
    HEADER="--representative_header_file ${HEADER_URL}"
else
    HEADER=""
fi

COMMAND="/opt/gcp_variant_transforms/bin/bq_to_vcf \
  --project ${GOOGLE_CLOUD_PROJECT} \
  --input_table ${INPUT_TABLE} \
  --output_file ${OUTPUT_FILE} \
  --temp_location ${TEMP_LOCATION} \
  --job_name bq-to-vcf-${DATE}-${TIME} \
  ${HEADER} \
  --runner DataflowRunner"

FULL_COMMAND="gcloud alpha genomics pipelines run \
  --project \"${GOOGLE_CLOUD_PROJECT}\" \
  --logging \"${TEMP_LOCATION}/runner_logs_${DATE}_${TIME}.log\" \
  --zones us-west1-b \
  --service-account-scopes https://www.googleapis.com/auth/cloud-platform \
  --docker-image gcr.io/gcp-variant-transforms/gcp-variant-transforms \
  --command-line \"${COMMAND}\""

echo $FULL_COMMAND
if [ $_arg_dry_run != "on" ]; then
    eval $FULL_COMMAND
else
    echo "Dry run"
fi

# ] <-- needed because of Argbash
