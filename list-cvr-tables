#!/bin/bash

# Created by argbash-init v2.8.0
# ARG_HELP([<List available Genomenon public CVR dataset ids>])
# ARG_OPTIONAL_SINGLE([assembly-version],[v],[Assembly version. GRCh37 or GRCh38])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='hv'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_assembly_version=


print_help()
{
	printf '%s\n' "<List available Genomenon public CVR dataset ids>"
	printf 'Usage: %s [-h|--help] [-v|--assembly-version <arg>]\n' "$0"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\t%s\n' "-v, --assembly-version: Assembly version. GRCh37 or GRCh38 (no default)"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			-v|--assembly-version)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_assembly_version="$2"
				shift
				;;
			--assembly-version=*)
				_arg_assembly_version="${_key##--assembly-version=}"
				;;
			-v*)
				_arg_assembly_version="${_key##-v}"
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


bq ls --format=sparse genomenon:cvr | grep "TABLE" | grep -oP "\w+" | grep -v "^TABLE$" | grep "${_arg_assembly_version}" | sort -r

# ] <-- needed because of Argbash
