#!/bin/bash

# Created by argbash-init v2.8.0
# ARG_HELP([<Creates a new project, links a billing account, and enables services>])
# ARG_POSITIONAL_SINGLE([id],[Project id])
# ARG_POSITIONAL_SINGLE([billing-id],[Billing account id: gcloud alpha billing accounts list])
# ARG_OPTIONAL_SINGLE([name],[n],[Project friendly name])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='hn'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_name=


print_help()
{
	printf '%s\n' "<Creates a new project, links a billing account, and enables services>"
	printf 'Usage: %s [-h|--help] [-n|--name <arg>] <id> <billing-id>\n' "$0"
	printf '\t%s\n' "<id>: Project id"
	printf '\t%s\n' "<billing-id>: Billing account id: gcloud alpha billing accounts list"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\t%s\n' "-n, --name: Project friendly name (no default)"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			-n|--name)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_name="$2"
				shift
				;;
			--name=*)
				_arg_name="${_key##--name=}"
				;;
			-n*)
				_arg_name="${_key##-n}"
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'id' and 'billing-id'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_id _arg_billing_id "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# Create project
gcloud projects create $_arg_id --name=$_arg_name

# Set active project
./set-active-project $_arg_id

# Enable billing for project
gcloud alpha billing projects link $_arg_id \
    --billing-account $_arg_billing_id

# Enable Cloud Genomics, Compute Engine, Cloud Storage, and Cloud Dataflow APIs
SERVICES="genomics.googleapis.com compute.googleapis.com storage-component.googleapis.com dataflow.googleapis.com"
gcloud services enable ${SERVICES}

# ] <-- needed because of Argbash
